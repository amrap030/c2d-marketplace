version: "3.8"

services:
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-root}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-changeme}
    restart: unless-stopped
    networks:
      - kong
    command: server --console-address ":9001" /data

  createbuckets:
    image: minio/mc
    container_name: createbuckets
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-root}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-changeme}
    networks:
      - kong
    entrypoint: > # see: https://github.com/minio/minio/issues/4769
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/sales;
      /usr/bin/mc mb myminio/purchases;
      exit 0;
      "

  crypto:
    build: ./src/crypto-service
    image: crypto-service
    container_name: crypto-service
    ports:
      - "7777:8000"
    restart: unless-stopped
    networks:
      - kong

  kong:
    build: ./src/api-gateway
    image: c2d-kong
    container_name: kong
    ports:
      - "8060:8060"
      - "8070:8070"
      - "8443:8443"
      - "8444:8444"
    volumes:
      - ./src/api-gateway/configuration/:/usr/local/kong/declarative
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_LOG_LEVEL: debug
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8060, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8070, 0.0.0.0:8444 ssl
    restart: unless-stopped
    networks:
      - kong
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 120s
      timeout: 10s
      retries: 3

  graph-node:
    image: graphprotocol/graph-node
    container_name: graph-node
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8020:8020"
      - "8030:8030"
      - "8040:8040"
    depends_on:
      - ipfs
      - postgres
    restart: unless-stopped
    environment:
      postgres_host: postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: "ipfs:5001"
      ethereum: "mainnet:http://host.docker.internal:8545"
      GRAPH_LOG: info
      GRAPH_ALLOW_NON_DETERMINISTIC_IPFS: true

  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: ipfs
    ports:
      - "5001:5001"
      - "8081:8080"
    volumes:
      - "./src/subgraph/cors.sh:/cors.sh"
      - "./src/subgraph/start_ipfs.sh:/start_ipfs.sh"
    entrypoint: /bin/sh
    command: /start_ipfs.sh
    restart: unless-stopped

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    container_name: graph-db
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node

  redis:
    image: "redis:alpine"
    restart: always
    container_name: redis
    command: redis-server --save 20 1 --loglevel warning --requirepass password
    ports:
      - "6379:6379"
    #volumes:
    #  - ./data/postgres:/var/lib/postgresql/data

  # influxdb:
  #   image: influxdb:2.1.1
  #   volumes:
  #     - influxdb-storage:/var/lib/influxdb2:rw
  #   env_file:
  #     - .influxenv
  #   entrypoint: ["./entrypoint.sh"]
  #   restart: on-failure:10
  #   ports:
  #     - ${DOCKER_INFLUXDB_INIT_PORT}:8086

  # telegraf:
  #   image: telegraf:1.19
  #   volumes:
  #     - ./telegraf.conf:/etc/telegraf/telegraf.conf:rw
  #   env_file:
  #     - .influxenv
  #   depends_on:
  #     - influxdb

  # grafana:
  #   image: grafana/grafana-oss:8.4.3
  #   volumes:
  #     - grafana-storage:/var/lib/grafana:rw
  #   depends_on:
  #     - influxdb
  #   ports:
  #     - ${GRAFANA_PORT}:3000

volumes:
  minio_storage:
  # grafana-storage:
  # influxdb-storage:

networks:
  kong:
    driver: bridge
    name: kong-network
