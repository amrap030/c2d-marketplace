schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Account {
  """The account address"""
  id: ID!
  """The Media the User owns"""
  possessions(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """The Media the User created"""
  creations(skip: Int = 0, first: Int = 100, orderBy: Token_orderBy, orderDirection: OrderDirection, where: Token_filter): [Token!]!
  """The purchases of a user"""
  purchases(skip: Int = 0, first: Int = 100, orderBy: FileSaleSession_orderBy, orderDirection: OrderDirection, where: FileSaleSession_filter): [FileSaleSession!]!
  """The sales of a user"""
  sales(skip: Int = 0, first: Int = 100, orderBy: FileSaleSession_orderBy, orderDirection: OrderDirection, where: FileSaleSession_filter): [FileSaleSession!]!
  """The activities of a user"""
  activities(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  possessions_: Token_filter
  creations_: Token_filter
  purchases_: FileSaleSession_filter
  sales_: FileSaleSession_filter
  activities_: Event_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
  possessions
  creations
  purchases
  sales
  activities
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Event {
  """<transactionHash>-<logIndex"""
  id: ID!
  """The User or Contract who initiated the transaction"""
  from: Account!
  """The Contract who receives the transaction"""
  to: String!
  """The timestamp of the block the transaction was created in"""
  createdAtTimestamp: BigInt!
  """The number of the block the transaction was created in"""
  createdAtBlockNumber: BigInt!
  """The gas price for the transaction"""
  gasPrice: BigInt!
  """The price of the transaction"""
  value: BigInt!
  """The type of the event"""
  type: EventType!
  """Transaction hash for the event"""
  transactionHash: String!
}

enum EventType {
  Approval
  ApprovalForAll
  Transfer
  Paused
  Unpaused
  MetadataUpdated
  ERC721Created
  OfferCreated
  OrderCreated
  OrderInitialized
  OrderAccepted
  OrderRevealed
  OrderFulfilled
  OrderCancelled
}

input Event_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: Account_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  type: EventType
  type_not: EventType
  type_in: [EventType!]
  type_not_in: [EventType!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Event_orderBy {
  id
  from
  to
  createdAtTimestamp
  createdAtBlockNumber
  gasPrice
  value
  type
  transactionHash
}

type FileSaleSession {
  """The item id"""
  id: ID!
  """The phase of a file sale session (one of created, initialized, accepted, keyRevealed, finished)"""
  phase: BigInt!
  """The sender of a computation"""
  sender: Account!
  """The receiver of a computation"""
  receiver: Account!
  """The token entity of a dataset"""
  dataset: Token!
  """The token entity of an algorithm"""
  algorithm: Token!
  """The address of the proof verification smart contract"""
  verifier: String!
  """The url of the proving key"""
  pkUrl: String!
  """The depth of the merkle tree"""
  depth: BigInt!
  """The length of the plain data"""
  length: BigInt!
  """The number of slices of the plain data"""
  n: BigInt!
  """The time until funds are locked in the marketplace"""
  timeout: BigInt!
  """The timeout interval for locked funds"""
  timeoutInterval: BigInt!
  """The price of a computation"""
  price: BigInt!
  """The hashed symmetric encryption key"""
  keyCommit: String!
  """The plain symmetric encryption key"""
  key: String!
  """The root hash of the plain data"""
  fileRoot: String!
  """The root hash of the encoding"""
  ciphertextRoot: String!
  """The timestamp of the block the session was created"""
  createdAtTimestamp: BigInt!
  """The number of the block the session was created"""
  createdAtBlockNumber: BigInt!
  """The timestamp of the block the session was updated"""
  updatedAtTimestamp: BigInt!
  """The number of the block the session was updated"""
  updatedAtBlockNumber: BigInt!
  """All events of the session"""
  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]
}

input FileSaleSession_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  phase: BigInt
  phase_not: BigInt
  phase_gt: BigInt
  phase_lt: BigInt
  phase_gte: BigInt
  phase_lte: BigInt
  phase_in: [BigInt!]
  phase_not_in: [BigInt!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Account_filter
  receiver: String
  receiver_not: String
  receiver_gt: String
  receiver_lt: String
  receiver_gte: String
  receiver_lte: String
  receiver_in: [String!]
  receiver_not_in: [String!]
  receiver_contains: String
  receiver_contains_nocase: String
  receiver_not_contains: String
  receiver_not_contains_nocase: String
  receiver_starts_with: String
  receiver_starts_with_nocase: String
  receiver_not_starts_with: String
  receiver_not_starts_with_nocase: String
  receiver_ends_with: String
  receiver_ends_with_nocase: String
  receiver_not_ends_with: String
  receiver_not_ends_with_nocase: String
  receiver_: Account_filter
  dataset: String
  dataset_not: String
  dataset_gt: String
  dataset_lt: String
  dataset_gte: String
  dataset_lte: String
  dataset_in: [String!]
  dataset_not_in: [String!]
  dataset_contains: String
  dataset_contains_nocase: String
  dataset_not_contains: String
  dataset_not_contains_nocase: String
  dataset_starts_with: String
  dataset_starts_with_nocase: String
  dataset_not_starts_with: String
  dataset_not_starts_with_nocase: String
  dataset_ends_with: String
  dataset_ends_with_nocase: String
  dataset_not_ends_with: String
  dataset_not_ends_with_nocase: String
  dataset_: Token_filter
  algorithm: String
  algorithm_not: String
  algorithm_gt: String
  algorithm_lt: String
  algorithm_gte: String
  algorithm_lte: String
  algorithm_in: [String!]
  algorithm_not_in: [String!]
  algorithm_contains: String
  algorithm_contains_nocase: String
  algorithm_not_contains: String
  algorithm_not_contains_nocase: String
  algorithm_starts_with: String
  algorithm_starts_with_nocase: String
  algorithm_not_starts_with: String
  algorithm_not_starts_with_nocase: String
  algorithm_ends_with: String
  algorithm_ends_with_nocase: String
  algorithm_not_ends_with: String
  algorithm_not_ends_with_nocase: String
  algorithm_: Token_filter
  verifier: String
  verifier_not: String
  verifier_gt: String
  verifier_lt: String
  verifier_gte: String
  verifier_lte: String
  verifier_in: [String!]
  verifier_not_in: [String!]
  verifier_contains: String
  verifier_contains_nocase: String
  verifier_not_contains: String
  verifier_not_contains_nocase: String
  verifier_starts_with: String
  verifier_starts_with_nocase: String
  verifier_not_starts_with: String
  verifier_not_starts_with_nocase: String
  verifier_ends_with: String
  verifier_ends_with_nocase: String
  verifier_not_ends_with: String
  verifier_not_ends_with_nocase: String
  pkUrl: String
  pkUrl_not: String
  pkUrl_gt: String
  pkUrl_lt: String
  pkUrl_gte: String
  pkUrl_lte: String
  pkUrl_in: [String!]
  pkUrl_not_in: [String!]
  pkUrl_contains: String
  pkUrl_contains_nocase: String
  pkUrl_not_contains: String
  pkUrl_not_contains_nocase: String
  pkUrl_starts_with: String
  pkUrl_starts_with_nocase: String
  pkUrl_not_starts_with: String
  pkUrl_not_starts_with_nocase: String
  pkUrl_ends_with: String
  pkUrl_ends_with_nocase: String
  pkUrl_not_ends_with: String
  pkUrl_not_ends_with_nocase: String
  depth: BigInt
  depth_not: BigInt
  depth_gt: BigInt
  depth_lt: BigInt
  depth_gte: BigInt
  depth_lte: BigInt
  depth_in: [BigInt!]
  depth_not_in: [BigInt!]
  length: BigInt
  length_not: BigInt
  length_gt: BigInt
  length_lt: BigInt
  length_gte: BigInt
  length_lte: BigInt
  length_in: [BigInt!]
  length_not_in: [BigInt!]
  n: BigInt
  n_not: BigInt
  n_gt: BigInt
  n_lt: BigInt
  n_gte: BigInt
  n_lte: BigInt
  n_in: [BigInt!]
  n_not_in: [BigInt!]
  timeout: BigInt
  timeout_not: BigInt
  timeout_gt: BigInt
  timeout_lt: BigInt
  timeout_gte: BigInt
  timeout_lte: BigInt
  timeout_in: [BigInt!]
  timeout_not_in: [BigInt!]
  timeoutInterval: BigInt
  timeoutInterval_not: BigInt
  timeoutInterval_gt: BigInt
  timeoutInterval_lt: BigInt
  timeoutInterval_gte: BigInt
  timeoutInterval_lte: BigInt
  timeoutInterval_in: [BigInt!]
  timeoutInterval_not_in: [BigInt!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  keyCommit: String
  keyCommit_not: String
  keyCommit_gt: String
  keyCommit_lt: String
  keyCommit_gte: String
  keyCommit_lte: String
  keyCommit_in: [String!]
  keyCommit_not_in: [String!]
  keyCommit_contains: String
  keyCommit_contains_nocase: String
  keyCommit_not_contains: String
  keyCommit_not_contains_nocase: String
  keyCommit_starts_with: String
  keyCommit_starts_with_nocase: String
  keyCommit_not_starts_with: String
  keyCommit_not_starts_with_nocase: String
  keyCommit_ends_with: String
  keyCommit_ends_with_nocase: String
  keyCommit_not_ends_with: String
  keyCommit_not_ends_with_nocase: String
  key: String
  key_not: String
  key_gt: String
  key_lt: String
  key_gte: String
  key_lte: String
  key_in: [String!]
  key_not_in: [String!]
  key_contains: String
  key_contains_nocase: String
  key_not_contains: String
  key_not_contains_nocase: String
  key_starts_with: String
  key_starts_with_nocase: String
  key_not_starts_with: String
  key_not_starts_with_nocase: String
  key_ends_with: String
  key_ends_with_nocase: String
  key_not_ends_with: String
  key_not_ends_with_nocase: String
  fileRoot: String
  fileRoot_not: String
  fileRoot_gt: String
  fileRoot_lt: String
  fileRoot_gte: String
  fileRoot_lte: String
  fileRoot_in: [String!]
  fileRoot_not_in: [String!]
  fileRoot_contains: String
  fileRoot_contains_nocase: String
  fileRoot_not_contains: String
  fileRoot_not_contains_nocase: String
  fileRoot_starts_with: String
  fileRoot_starts_with_nocase: String
  fileRoot_not_starts_with: String
  fileRoot_not_starts_with_nocase: String
  fileRoot_ends_with: String
  fileRoot_ends_with_nocase: String
  fileRoot_not_ends_with: String
  fileRoot_not_ends_with_nocase: String
  ciphertextRoot: String
  ciphertextRoot_not: String
  ciphertextRoot_gt: String
  ciphertextRoot_lt: String
  ciphertextRoot_gte: String
  ciphertextRoot_lte: String
  ciphertextRoot_in: [String!]
  ciphertextRoot_not_in: [String!]
  ciphertextRoot_contains: String
  ciphertextRoot_contains_nocase: String
  ciphertextRoot_not_contains: String
  ciphertextRoot_not_contains_nocase: String
  ciphertextRoot_starts_with: String
  ciphertextRoot_starts_with_nocase: String
  ciphertextRoot_not_starts_with: String
  ciphertextRoot_not_starts_with_nocase: String
  ciphertextRoot_ends_with: String
  ciphertextRoot_ends_with_nocase: String
  ciphertextRoot_not_ends_with: String
  ciphertextRoot_not_ends_with_nocase: String
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  updatedAtTimestamp: BigInt
  updatedAtTimestamp_not: BigInt
  updatedAtTimestamp_gt: BigInt
  updatedAtTimestamp_lt: BigInt
  updatedAtTimestamp_gte: BigInt
  updatedAtTimestamp_lte: BigInt
  updatedAtTimestamp_in: [BigInt!]
  updatedAtTimestamp_not_in: [BigInt!]
  updatedAtBlockNumber: BigInt
  updatedAtBlockNumber_not: BigInt
  updatedAtBlockNumber_gt: BigInt
  updatedAtBlockNumber_lt: BigInt
  updatedAtBlockNumber_gte: BigInt
  updatedAtBlockNumber_lte: BigInt
  updatedAtBlockNumber_in: [BigInt!]
  updatedAtBlockNumber_not_in: [BigInt!]
  events: [String!]
  events_not: [String!]
  events_contains: [String!]
  events_contains_nocase: [String!]
  events_not_contains: [String!]
  events_not_contains_nocase: [String!]
  events_: Event_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum FileSaleSession_orderBy {
  id
  phase
  sender
  receiver
  dataset
  algorithm
  verifier
  pkUrl
  depth
  length
  n
  timeout
  timeoutInterval
  price
  keyCommit
  key
  fileRoot
  ciphertextRoot
  createdAtTimestamp
  createdAtBlockNumber
  updatedAtTimestamp
  updatedAtBlockNumber
  events
}

type Offer {
  """The item id"""
  id: ID!
  """The current owner of the token"""
  sender: Account!
  """The creator of the token"""
  price: BigInt!
  """The corresponding algorithm token"""
  algorithm: Token!
  """The corresponding dataset token"""
  dataset: Token!
  """The timestamp of the block the offer was created"""
  createdAtTimestamp: BigInt!
  """The number of the block the offer was created"""
  createdAtBlockNumber: BigInt!
  """The timestamp of the block the offer was updated"""
  updatedAtTimestamp: BigInt!
  """The number of the block the offer was updated"""
  updatedAtBlockNumber: BigInt!
}

input Offer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: String
  sender_not: String
  sender_gt: String
  sender_lt: String
  sender_gte: String
  sender_lte: String
  sender_in: [String!]
  sender_not_in: [String!]
  sender_contains: String
  sender_contains_nocase: String
  sender_not_contains: String
  sender_not_contains_nocase: String
  sender_starts_with: String
  sender_starts_with_nocase: String
  sender_not_starts_with: String
  sender_not_starts_with_nocase: String
  sender_ends_with: String
  sender_ends_with_nocase: String
  sender_not_ends_with: String
  sender_not_ends_with_nocase: String
  sender_: Account_filter
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  algorithm: String
  algorithm_not: String
  algorithm_gt: String
  algorithm_lt: String
  algorithm_gte: String
  algorithm_lte: String
  algorithm_in: [String!]
  algorithm_not_in: [String!]
  algorithm_contains: String
  algorithm_contains_nocase: String
  algorithm_not_contains: String
  algorithm_not_contains_nocase: String
  algorithm_starts_with: String
  algorithm_starts_with_nocase: String
  algorithm_not_starts_with: String
  algorithm_not_starts_with_nocase: String
  algorithm_ends_with: String
  algorithm_ends_with_nocase: String
  algorithm_not_ends_with: String
  algorithm_not_ends_with_nocase: String
  algorithm_: Token_filter
  dataset: String
  dataset_not: String
  dataset_gt: String
  dataset_lt: String
  dataset_gte: String
  dataset_lte: String
  dataset_in: [String!]
  dataset_not_in: [String!]
  dataset_contains: String
  dataset_contains_nocase: String
  dataset_not_contains: String
  dataset_not_contains_nocase: String
  dataset_starts_with: String
  dataset_starts_with_nocase: String
  dataset_not_starts_with: String
  dataset_not_starts_with_nocase: String
  dataset_ends_with: String
  dataset_ends_with_nocase: String
  dataset_not_ends_with: String
  dataset_not_ends_with_nocase: String
  dataset_: Token_filter
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  updatedAtTimestamp: BigInt
  updatedAtTimestamp_not: BigInt
  updatedAtTimestamp_gt: BigInt
  updatedAtTimestamp_lt: BigInt
  updatedAtTimestamp_gte: BigInt
  updatedAtTimestamp_lte: BigInt
  updatedAtTimestamp_in: [BigInt!]
  updatedAtTimestamp_not_in: [BigInt!]
  updatedAtBlockNumber: BigInt
  updatedAtBlockNumber_not: BigInt
  updatedAtBlockNumber_gt: BigInt
  updatedAtBlockNumber_lt: BigInt
  updatedAtBlockNumber_gte: BigInt
  updatedAtBlockNumber_lte: BigInt
  updatedAtBlockNumber_in: [BigInt!]
  updatedAtBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Offer_orderBy {
  id
  sender
  price
  algorithm
  dataset
  createdAtTimestamp
  createdAtBlockNumber
  updatedAtTimestamp
  updatedAtBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  token(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  account(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  event(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  offer(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  fileSaleSession(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FileSaleSession
  fileSaleSessions(
    skip: Int = 0
    first: Int = 100
    orderBy: FileSaleSession_orderBy
    orderDirection: OrderDirection
    where: FileSaleSession_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FileSaleSession!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  token(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  account(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  event(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Event
  events(
    skip: Int = 0
    first: Int = 100
    orderBy: Event_orderBy
    orderDirection: OrderDirection
    where: Event_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Event!]!
  offer(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  fileSaleSession(
    id: ID!
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FileSaleSession
  fileSaleSessions(
    skip: Int = 0
    first: Int = 100
    orderBy: FileSaleSession_orderBy
    orderDirection: OrderDirection
    where: FileSaleSession_filter
    """The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."""
    block: Block_height
    """Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."""
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FileSaleSession!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  """The contract address"""
  id: ID!
  """Kind of the token"""
  kind: BigInt!
  """The transaction hash the token was created at"""
  transactionHash: String!
  """The current owner of the token"""
  owner: Account!
  """The creator of the token"""
  creator: Account!
  """The previous owner of the token"""
  prevOwner: Account!
  """The approved user of the token"""
  approved: Account
  """The uri of the metadata"""
  metadataURI: String!
  """The timestamp of the block the token was minted in"""
  createdAtTimestamp: BigInt!
  """The number of the block the token was minted in"""
  createdAtBlockNumber: BigInt!
  """The timestamp of the block the token was updated"""
  updatedAtTimestamp: BigInt!
  """The number of the block the token was updated"""
  updatedAtBlockNumber: BigInt!
  """Supports ERC721 metadata"""
  supportsMetadata: Boolean
  """The token name"""
  name: String!
  """Metadata of token"""
  metadata: String
  """The token symbol"""
  symbol: String!
  """The address of the template"""
  template: String!
  """All addresses of managers"""
  managers: [String!]
  """The paused state of the token"""
  paused: Boolean
  """The offerings of the Media"""
  offers(skip: Int = 0, first: Int = 100, orderBy: Offer_orderBy, orderDirection: OrderDirection, where: Offer_filter): [Offer!]
  """The file sessions of the token"""
  sessions(skip: Int = 0, first: Int = 100, orderBy: FileSaleSession_orderBy, orderDirection: OrderDirection, where: FileSaleSession_filter): [FileSaleSession!]
  """All events of the media"""
  events(skip: Int = 0, first: Int = 100, orderBy: Event_orderBy, orderDirection: OrderDirection, where: Event_filter): [Event!]
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  kind: BigInt
  kind_not: BigInt
  kind_gt: BigInt
  kind_lt: BigInt
  kind_gte: BigInt
  kind_lte: BigInt
  kind_in: [BigInt!]
  kind_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter
  creator: String
  creator_not: String
  creator_gt: String
  creator_lt: String
  creator_gte: String
  creator_lte: String
  creator_in: [String!]
  creator_not_in: [String!]
  creator_contains: String
  creator_contains_nocase: String
  creator_not_contains: String
  creator_not_contains_nocase: String
  creator_starts_with: String
  creator_starts_with_nocase: String
  creator_not_starts_with: String
  creator_not_starts_with_nocase: String
  creator_ends_with: String
  creator_ends_with_nocase: String
  creator_not_ends_with: String
  creator_not_ends_with_nocase: String
  creator_: Account_filter
  prevOwner: String
  prevOwner_not: String
  prevOwner_gt: String
  prevOwner_lt: String
  prevOwner_gte: String
  prevOwner_lte: String
  prevOwner_in: [String!]
  prevOwner_not_in: [String!]
  prevOwner_contains: String
  prevOwner_contains_nocase: String
  prevOwner_not_contains: String
  prevOwner_not_contains_nocase: String
  prevOwner_starts_with: String
  prevOwner_starts_with_nocase: String
  prevOwner_not_starts_with: String
  prevOwner_not_starts_with_nocase: String
  prevOwner_ends_with: String
  prevOwner_ends_with_nocase: String
  prevOwner_not_ends_with: String
  prevOwner_not_ends_with_nocase: String
  prevOwner_: Account_filter
  approved: String
  approved_not: String
  approved_gt: String
  approved_lt: String
  approved_gte: String
  approved_lte: String
  approved_in: [String!]
  approved_not_in: [String!]
  approved_contains: String
  approved_contains_nocase: String
  approved_not_contains: String
  approved_not_contains_nocase: String
  approved_starts_with: String
  approved_starts_with_nocase: String
  approved_not_starts_with: String
  approved_not_starts_with_nocase: String
  approved_ends_with: String
  approved_ends_with_nocase: String
  approved_not_ends_with: String
  approved_not_ends_with_nocase: String
  approved_: Account_filter
  metadataURI: String
  metadataURI_not: String
  metadataURI_gt: String
  metadataURI_lt: String
  metadataURI_gte: String
  metadataURI_lte: String
  metadataURI_in: [String!]
  metadataURI_not_in: [String!]
  metadataURI_contains: String
  metadataURI_contains_nocase: String
  metadataURI_not_contains: String
  metadataURI_not_contains_nocase: String
  metadataURI_starts_with: String
  metadataURI_starts_with_nocase: String
  metadataURI_not_starts_with: String
  metadataURI_not_starts_with_nocase: String
  metadataURI_ends_with: String
  metadataURI_ends_with_nocase: String
  metadataURI_not_ends_with: String
  metadataURI_not_ends_with_nocase: String
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_not_in: [BigInt!]
  updatedAtTimestamp: BigInt
  updatedAtTimestamp_not: BigInt
  updatedAtTimestamp_gt: BigInt
  updatedAtTimestamp_lt: BigInt
  updatedAtTimestamp_gte: BigInt
  updatedAtTimestamp_lte: BigInt
  updatedAtTimestamp_in: [BigInt!]
  updatedAtTimestamp_not_in: [BigInt!]
  updatedAtBlockNumber: BigInt
  updatedAtBlockNumber_not: BigInt
  updatedAtBlockNumber_gt: BigInt
  updatedAtBlockNumber_lt: BigInt
  updatedAtBlockNumber_gte: BigInt
  updatedAtBlockNumber_lte: BigInt
  updatedAtBlockNumber_in: [BigInt!]
  updatedAtBlockNumber_not_in: [BigInt!]
  supportsMetadata: Boolean
  supportsMetadata_not: Boolean
  supportsMetadata_in: [Boolean!]
  supportsMetadata_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  metadata: String
  metadata_not: String
  metadata_gt: String
  metadata_lt: String
  metadata_gte: String
  metadata_lte: String
  metadata_in: [String!]
  metadata_not_in: [String!]
  metadata_contains: String
  metadata_contains_nocase: String
  metadata_not_contains: String
  metadata_not_contains_nocase: String
  metadata_starts_with: String
  metadata_starts_with_nocase: String
  metadata_not_starts_with: String
  metadata_not_starts_with_nocase: String
  metadata_ends_with: String
  metadata_ends_with_nocase: String
  metadata_not_ends_with: String
  metadata_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  template: String
  template_not: String
  template_gt: String
  template_lt: String
  template_gte: String
  template_lte: String
  template_in: [String!]
  template_not_in: [String!]
  template_contains: String
  template_contains_nocase: String
  template_not_contains: String
  template_not_contains_nocase: String
  template_starts_with: String
  template_starts_with_nocase: String
  template_not_starts_with: String
  template_not_starts_with_nocase: String
  template_ends_with: String
  template_ends_with_nocase: String
  template_not_ends_with: String
  template_not_ends_with_nocase: String
  managers: [String!]
  managers_not: [String!]
  managers_contains: [String!]
  managers_contains_nocase: [String!]
  managers_not_contains: [String!]
  managers_not_contains_nocase: [String!]
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]
  offers_: Offer_filter
  sessions_: FileSaleSession_filter
  events: [String!]
  events_not: [String!]
  events_contains: [String!]
  events_contains_nocase: [String!]
  events_not_contains: [String!]
  events_not_contains_nocase: [String!]
  events_: Event_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Token_orderBy {
  id
  kind
  transactionHash
  owner
  creator
  prevOwner
  approved
  metadataURI
  createdAtTimestamp
  createdAtBlockNumber
  updatedAtTimestamp
  updatedAtBlockNumber
  supportsMetadata
  name
  metadata
  symbol
  template
  managers
  paused
  offers
  sessions
  events
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """If the subgraph has indexing errors, data will be omitted. The default."""
  deny
}
